// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Party {
  id      BigInt    @id
  name    String
  Channel Channel[]
}

model Channel {
  id                String           @id @default(uuid())
  name              String
  channel_id        String
  is_party_channel  Boolean          @default(false)
  partyId           BigInt
  party_affiliation Party            @relation(fields: [partyId], references: [id], onDelete: Cascade)
  createdAt         DateTime         @default(now())
  channel_update    Channel_Update[]
  Youtube_Video     Youtube_Video[]
}

model Channel_Update {
  id         String   @id @default(uuid())
  channel_Id String
  channel    Channel  @relation(fields: [channel_Id], references: [id], onDelete: Cascade)
  subscriber BigInt?  @default(0)
  views      BigInt?  @default(0)
  createdAt  DateTime @default(now())
}

model Youtube_Video {
  id                   String                 @id @default(uuid())
  name                 String
  channelId            String
  channel              Channel                @relation(fields: [channelId], references: [id], onDelete: Cascade)
  transcript           String
  video_id             String
  youtube_video_update Youtube_Video_Update[]
  createdAt            DateTime               @default(now())
}

model Youtube_Video_Update {
  id              String        @id @default(uuid())
  youtube_Video   Youtube_Video @relation(fields: [youtube_VideoId], references: [id], onDelete: Cascade)
  youtube_VideoId String
  views           BigInt
  likes           BigInt
  comment_amount  BigInt
  createdAt       DateTime      @default(now())
}
